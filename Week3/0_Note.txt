비선형 자료구조
- 트리
    계층적 자료 구조를 뜻함. 노드 (정보를 포함)
    뿌리노드 존재.
    각 노드는 다양한 갯수의 자녀를 가짐
    루트를 제외한 각 노드는 하나의 노드를 부모로 가짐
    트리의 degree = 이 노드가 가진 자녀의 수
    트리의 silbling = 같은 부모를 가진 노드들
    leaf node = 자녀가 없는 노드 deg() = 0
    internal node = 자녀가 있는 노드 deg() >= 1 인 것들

    ordered tree = 자녀의 순서가 존재
    unordered tree = 자녀의 순서가 없음

    Paths: 이 경로의 길이는 몇개의 노드를 거쳐갔는가?

    Depth:
        트리의 임의의 노드를 선택했을 때, root로부터 이 노드까지의 경로는 반드시 unique해야 한다.
        노드의 depth는 root 노드로 부터 해당 노드까지의 경로 길이를 의미함

    Height:
        트리내의 노드 중 가장 큰 depth를 의미함
        root 노드만 존재시 height = 0
        트리가 비어있을 시 height은 -1로 표현

    Ancestor and Descendant
        : 자기 자신은 자신의 조상이자 자손이다. strict로 제한을 걸 수 있음.

    트리를 구현할 떄: 자녀의 linked list를 사용

- 그래프
    데이터 사이에 인접한 정보를 저장하는 자료구조
    오브젝트와 관계가 존재
    오브젝트: 저장하고자 하는 객체, 노드로 표현
    관계: 오브젝트의 관계성을 저장 (edge로 연결)

    1) Undirected Graphs: 내가 알고 있는 것과 동일
        이때의 최대 edge갯수 = nC2
        degree = 자신의 이웃 갯수를 뜻함

    2) Sub-Graphs
        오리지널 그래프에서 vertex와 edge를 샘플링한 것

        path = 몇개의 edge를 거쳐갔는가?
        simple path = 중복이 없는 경로
        simple cycle = 심플 패스의 특수한 경우로, 심플패스로 처음과 마지막 노드가 같은 경우
        connectedness = 두 정점이 연결되었다는 것은 경로가 존재한다는 것임.

    3) Weighted Graphs
        edge의 연결성 뿐만 아니라 이것에 숫자를 부여

    4) 트리
        반드시 간서의 갯수가 정점의 갯수 - 1 이어야함
        한 정점에서 다른 정점으로 가는데 모든 간선을 지나고 경로가 유니크할 때 트리는 그래프가 된다.

    5) Forest
        사이클이 없는 그래프

    6) Directed Graphs
        방향성이 있는 그래프
        source = in이 0인 노드
        sink = out이 0인 노드

    7) weighted directed graphs

    8) Directed Acyclic Graphs: 방향성이 존재하나 cycle이 존재하지 않음.

    9) Adjacency Matrix
        정점을 연결하는 간선의 갯수를 행렬화 # 메모리 사용률이 높음음

    10)Adjacency list: 가장 많이 사용되는 알고리즘
        전체 vertex의 갯수만큼 리스트 필요, 전체 데이터 갯수는 ege 갯수를 넘어가지 않음
        최대 vertex 혹은 엣지 갯수만큼의 메모리만 요구
