'''
델타를 이용한 2차 list 탐색
1. 2차 List의 한 좌표에서 네 방향의 인접 List 요소를 탐색할때 사용
2. 델타 값은 한 좌표에서 네 방향의 좌표와 x, y의 차이를 저장한 List로 구현
3. 델타 값을 이용해 특정 원소의 상화좌우에 위치한 원소에 접근할 수 있음.

전치 행렬: 행렬의 행과 열을 변경

내장함수 zip(): 동일한 개수로 이루어진 자료형들을 묶어 주는 역할을 하는 함수
'''

alpha = ['a', 'b', 'c', 'd']
index = [1, 2, 3, 4, 5, 6, 7]

alpha_index = zip(alpha, index)
print(alpha_index) # 튜플 객체로 묶은 상태
print(list(alpha_index)) # 리스트형으로 반환

# zip(*arr) arr 행렬을 전치행렬로 변환

'''
부분 집합의 합 문제
집합의 모든 부분집합 생성 방법은?

Q. 어떤 집합의 부분 집합을 구할 경우 부분 집합의 총 개수는 몇개일까요?
A: 집합의 원소가 n개일 때, 공집합을 포함한 부분집합의 개수는 2의 n승
   각 원소를 부분 집합에 포함시키거나 포함시키지 않는 2가지 경우를 모든 원소에 적용한 경우의 수와 같음
'''

arr = [3, 6, 7, 1, 5, 4]
n = len(arr) # 원소의 개수

count = 0
for i in range(1<<n): # 1<<n: 부분 집합의 개수
    for j in range(n): # 원소의 수만큼 비트를 비교함
        if i&(1<<j):#i의 j번째 비트가 1이면 j번째 원소 출력
            print(arr[j], end=",")
            count += 1
    print()
print(count)